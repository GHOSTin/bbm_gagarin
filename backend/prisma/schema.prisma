// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Roles {
  USER
  ADMIN
  MODERATOR
}

model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  name           String?
  password       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  refreshToken   String?
  resetToken     String?
  role           Roles       @default(USER)
  profile        Profile?
  completedTests UsersTest[]
  ProfTests      ProfTest[]
  checkLists     CheckList[]
}

model Profile {
  id          String    @id @unique @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  group       Group?    @relation(fields: [groupId], references: [id])
  groupId     String?   @unique
  firstName   String
  lastName    String
  middleName  String?
  birthday    DateTime?
  phone       String?   @default("")
  acceptTerms Boolean   @default(false)
}

model Group {
  id      String   @id @unique @default(uuid())
  profile Profile?
  name    String
}

model UsersTest {
  id         String  @id @unique @default(uuid())
  type       String
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  isComplete Boolean @default(false)
  result     Json?
}

model ProfTest {
  id         String      @id @unique @default(uuid())
  name       String
  active     Boolean
  users      User[]
  checkLists CheckList[]
}

model CheckList {
  id         String   @id @unique @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  profTest   ProfTest @relation(fields: [profTestId], references: [id])
  profTestId String
  wasBenefit Boolean  @default(false)
  wouldLike  String?
  dificultes String?
  ideas      String?
  canWorking Boolean  @default(false)
  rivalry    String?
  wishes     Boolean  @default(true)
  downsides  String?
}
